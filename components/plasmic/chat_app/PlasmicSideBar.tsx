// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tuYYL4LS2Mqra35JfVEDDQ
// Component: aUbJMRLkoZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: kv2sB2fQdM/component
import TextInput from "../../TextInput"; // plasmic-import: 9ljEDf5OMQM/component
import ChatList from "../../ChatList"; // plasmic-import: csngSC__Aa/component

import { useScreenVariants as useScreenVariantsn4SC0SB8S1Vh8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: N4sC0sB8s1vh8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_chat_app.module.css"; // plasmic-import: tuYYL4LS2Mqra35JfVEDDQ/projectcss
import sty from "./PlasmicSideBar.module.css"; // plasmic-import: aUbJMRLkoZ/css

import LogoutSvgrepoComsvgIcon from "./icons/PlasmicIcon__LogoutSvgrepoComsvg"; // plasmic-import: Bz9hufRfV0/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: X-S4N8Ewv2b/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: i-vm5fwpkkY/icon

export type PlasmicSideBar__VariantMembers = {};
export type PlasmicSideBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSideBar__VariantsArgs;
export const PlasmicSideBar__VariantProps = new Array<VariantPropType>();

export type PlasmicSideBar__ArgsType = {
  username?: React.ReactNode;
  user?: any;
};
type ArgPropType = keyof PlasmicSideBar__ArgsType;
export const PlasmicSideBar__ArgProps = new Array<ArgPropType>(
  "username",
  "user"
);

export type PlasmicSideBar__OverridesType = {
  root?: p.Flex<"div">;
  headerProfile?: p.Flex<"div">;
  userAvatar?: p.Flex<typeof Avatar>;
  logoutIcon?: p.Flex<"svg">;
  searchInputWrapper?: p.Flex<"div">;
  searchRoomTextInput?: p.Flex<typeof TextInput>;
  addNewRoomWrapper?: p.Flex<"div">;
  text?: p.Flex<"div">;
  chatList?: p.Flex<typeof ChatList>;
};

export interface DefaultSideBarProps {
  username?: React.ReactNode;
  user?: any;
  className?: string;
}

function PlasmicSideBar__RenderFunc(props: {
  variants: PlasmicSideBar__VariantsArgs;
  args: PlasmicSideBar__ArgsType;
  overrides: PlasmicSideBar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsn4SC0SB8S1Vh8()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"headerProfile"}
        data-plasmic-override={overrides.headerProfile}
        hasGap={true}
        className={classNames(projectcss.all, sty.headerProfile)}
      >
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox__jYfVw)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vGFkc)}
              >
                <Avatar
                  data-plasmic-name={"userAvatar"}
                  data-plasmic-override={overrides.userAvatar}
                  className={classNames("__wab_instance", sty.userAvatar)}
                  isEmpty={true}
                  size={"_60" as const}
                />

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gwct9)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    )
                      ? p.renderPlasmicSlot({
                          defaultContents: "Enter some text",
                          value: args.username
                        })
                      : null}
                  </div>
                ) : null}

                <LogoutSvgrepoComsvgIcon
                  data-plasmic-name={"logoutIcon"}
                  data-plasmic-override={overrides.logoutIcon}
                  className={classNames(projectcss.all, sty.logoutIcon)}
                  role={"img"}
                />
              </p.Stack>
            ) : null}
          </div>
        ) : null}
      </p.Stack>

      <div
        data-plasmic-name={"searchInputWrapper"}
        data-plasmic-override={overrides.searchInputWrapper}
        className={classNames(projectcss.all, sty.searchInputWrapper)}
      >
        <TextInput
          data-plasmic-name={"searchRoomTextInput"}
          data-plasmic-override={overrides.searchRoomTextInput}
          className={classNames("__wab_instance", sty.searchRoomTextInput)}
          placeholder={"Search room by name..." as const}
        />
      </div>

      <div
        data-plasmic-name={"addNewRoomWrapper"}
        data-plasmic-override={overrides.addNewRoomWrapper}
        className={classNames(projectcss.all, sty.addNewRoomWrapper)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Add New Room"}
        </div>
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__zn140)}>
          <ChatList
            data-plasmic-name={"chatList"}
            data-plasmic-override={overrides.chatList}
            className={classNames("__wab_instance", sty.chatList)}
          />
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerProfile",
    "userAvatar",
    "logoutIcon",
    "searchInputWrapper",
    "searchRoomTextInput",
    "addNewRoomWrapper",
    "text",
    "chatList"
  ],
  headerProfile: ["headerProfile", "userAvatar", "logoutIcon"],
  userAvatar: ["userAvatar"],
  logoutIcon: ["logoutIcon"],
  searchInputWrapper: ["searchInputWrapper", "searchRoomTextInput"],
  searchRoomTextInput: ["searchRoomTextInput"],
  addNewRoomWrapper: ["addNewRoomWrapper", "text"],
  text: ["text"],
  chatList: ["chatList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerProfile: "div";
  userAvatar: typeof Avatar;
  logoutIcon: "svg";
  searchInputWrapper: "div";
  searchRoomTextInput: typeof TextInput;
  addNewRoomWrapper: "div";
  text: "div";
  chatList: typeof ChatList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideBar__VariantsArgs;
    args?: PlasmicSideBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSideBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSideBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSideBar__ArgProps,
          internalVariantPropNames: PlasmicSideBar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSideBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBar";
  } else {
    func.displayName = `PlasmicSideBar.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBar = Object.assign(
  // Top-level PlasmicSideBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerProfile: makeNodeComponent("headerProfile"),
    userAvatar: makeNodeComponent("userAvatar"),
    logoutIcon: makeNodeComponent("logoutIcon"),
    searchInputWrapper: makeNodeComponent("searchInputWrapper"),
    searchRoomTextInput: makeNodeComponent("searchRoomTextInput"),
    addNewRoomWrapper: makeNodeComponent("addNewRoomWrapper"),
    text: makeNodeComponent("text"),
    chatList: makeNodeComponent("chatList"),

    // Metadata about props expected for PlasmicSideBar
    internalVariantProps: PlasmicSideBar__VariantProps,
    internalArgProps: PlasmicSideBar__ArgProps
  }
);

export default PlasmicSideBar;
/* prettier-ignore-end */
