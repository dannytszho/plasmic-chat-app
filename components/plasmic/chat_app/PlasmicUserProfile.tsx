// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tuYYL4LS2Mqra35JfVEDDQ
// Component: -E2Ngdl7gzB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UploadAvatar from "../../UploadAvatar"; // plasmic-import: 1SkV-WKjFZ/component
import TextInput from "../../TextInput"; // plasmic-import: 9ljEDf5OMQM/component
import Button from "../../Button"; // plasmic-import: wphpnoIP_G8/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_chat_app.module.css"; // plasmic-import: tuYYL4LS2Mqra35JfVEDDQ/projectcss
import sty from "./PlasmicUserProfile.module.css"; // plasmic-import: -E2Ngdl7gzB/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: X-S4N8Ewv2b/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: i-vm5fwpkkY/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jHbu47_nmiW/icon

export type PlasmicUserProfile__VariantMembers = {
  isError: "isError";
};
export type PlasmicUserProfile__VariantsArgs = {
  isError?: SingleBooleanChoiceArg<"isError">;
};
type VariantPropType = keyof PlasmicUserProfile__VariantsArgs;
export const PlasmicUserProfile__VariantProps = new Array<VariantPropType>(
  "isError"
);

export type PlasmicUserProfile__ArgsType = {
  errorMessage?: React.ReactNode;
};
type ArgPropType = keyof PlasmicUserProfile__ArgsType;
export const PlasmicUserProfile__ArgProps = new Array<ArgPropType>(
  "errorMessage"
);

export type PlasmicUserProfile__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  uploadAvatar?: p.Flex<typeof UploadAvatar>;
  firstNameInput?: p.Flex<typeof TextInput>;
  lastNameInput?: p.Flex<typeof TextInput>;
  saveProfileButton?: p.Flex<typeof Button>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultUserProfileProps {
  errorMessage?: React.ReactNode;
  isError?: SingleBooleanChoiceArg<"isError">;
  className?: string;
}

function PlasmicUserProfile__RenderFunc(props: {
  variants: PlasmicUserProfile__VariantsArgs;
  args: PlasmicUserProfile__ArgsType;
  overrides: PlasmicUserProfile__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisError]: hasVariant(variants, "isError", "isError") }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Update Profile"}
      </div>

      <UploadAvatar
        data-plasmic-name={"uploadAvatar"}
        data-plasmic-override={overrides.uploadAvatar}
        className={classNames("__wab_instance", sty.uploadAvatar)}
      />

      <TextInput
        data-plasmic-name={"firstNameInput"}
        data-plasmic-override={overrides.firstNameInput}
        className={classNames("__wab_instance", sty.firstNameInput)}
        placeholder={"Enter your First Name" as const}
      />

      <TextInput
        data-plasmic-name={"lastNameInput"}
        data-plasmic-override={overrides.lastNameInput}
        className={classNames("__wab_instance", sty.lastNameInput)}
        placeholder={"Enter your Last Name" as const}
      />

      <Button
        data-plasmic-name={"saveProfileButton"}
        data-plasmic-override={overrides.saveProfileButton}
        className={classNames("__wab_instance", sty.saveProfileButton)}
        color={"softGreen" as const}
      >
        {"Save Profile"}
      </Button>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        color={"link" as const}
        link={`/`}
      >
        {"Let's chat!!"}
      </Button>

      {(hasVariant(variants, "isError", "isError") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__wDx6F, {
            [sty.freeBoxisError__wDx6FPxKaD]: hasVariant(
              variants,
              "isError",
              "isError"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__oFzQv, {
              [sty.freeBoxisError__oFzQvPxKaD]: hasVariant(
                variants,
                "isError",
                "isError"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.errorMessage,
              className: classNames(sty.slotTargetErrorMessage, {
                [sty.slotTargetErrorMessageisError]: hasVariant(
                  variants,
                  "isError",
                  "isError"
                )
              })
            })}
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "uploadAvatar",
    "firstNameInput",
    "lastNameInput",
    "saveProfileButton",
    "button"
  ],
  text: ["text"],
  uploadAvatar: ["uploadAvatar"],
  firstNameInput: ["firstNameInput"],
  lastNameInput: ["lastNameInput"],
  saveProfileButton: ["saveProfileButton"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  uploadAvatar: typeof UploadAvatar;
  firstNameInput: typeof TextInput;
  lastNameInput: typeof TextInput;
  saveProfileButton: typeof Button;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserProfile__VariantsArgs;
    args?: PlasmicUserProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicUserProfile__ArgProps,
          internalVariantPropNames: PlasmicUserProfile__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicUserProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserProfile";
  } else {
    func.displayName = `PlasmicUserProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicUserProfile = Object.assign(
  // Top-level PlasmicUserProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    uploadAvatar: makeNodeComponent("uploadAvatar"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    saveProfileButton: makeNodeComponent("saveProfileButton"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicUserProfile
    internalVariantProps: PlasmicUserProfile__VariantProps,
    internalArgProps: PlasmicUserProfile__ArgProps
  }
);

export default PlasmicUserProfile;
/* prettier-ignore-end */
